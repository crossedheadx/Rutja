Guida generica per i sistemi Linux e Unix

*Premessa alla lettura di questa guida nei suoi termini:
= Linux - con la dicitura Linux o GNU/Linux si fa sempre riferimento al kernel di sistema, mai al Sistema operativo
= Distro - questo termine fa proprio riferimento al sistema operativo, compreso di kernel, shell
= OS o SO - abbreviazione per Operating System oppure italianizzato in Sistema Operativo
= $ - se un comando ha al suo inizio il simbolo del dollaro, si intende che sia eseguito senza privilegi amministrativi o di root
= # - se un comando ha il simbolo del cancelletto al suo inizio, si intende che sia eseguito direttamente da root
= CLI / cli - Command Line Interface, la riga di comando o per meglio dire il terminale 
= dalla radice - inteso dalla base del filesystem, per convenzione / 

- Comandi e trucchi di shell

$ cd ..
  change directory, serve per cambiare la cartella di lavoro, o a puntare la cartella di destinazione. Con $ cd .. si intende di salire di un livello.
  $ cd /home/foo/bar -> spostarsi nella cartella bar, contenuta nella cartella di foo

$ pwd
  Letteralmente Print Working Directory -> stampa a video la cartella attuale

$ whoami
  stampa a video l'utente corrente

$ ls
  elenca gli elementi della cartella corrente, con ls -a stampa tutti gli elementi, anche i file nascosti

$ cp [parametri] [elemento] [elemento] .. [destinazione]
  copia gli elementi nella destinazione indicata come ultima opzione, ATTENZIONE! si puo' usare per clonare dei file(quid il file di destinazione non deve per forza esistere)
  ATTENZIONE!2 se si sta passando una cartella, ricordarsi di mettere il parametro -R (recursive), per passare ricorsivamente i file e le cartelle sottostanti
  parametri accetti:
  -i -> interactive, chiede conferma per ogni singolo file 
  -v -> verbose, stampa a video ogni cosa che fa 
  -f -> force, forza la copia 

$ mv [elemento] [elemento] .. [destinazione]
  sposta gli elementi nella destinazione indicata messa per ultima nella coda, come $ cp, quindi segue la stessa sintassi

$ mkdir [nomecartella]
  crea una cartella nella directory corrente 
  
$ touch [nomefile]
  crea un file, a discrezione dell'utente l'estensione

$ rm [parametri] [elemento] [elemento] ..
  rimozione di uno o piu' file, usa gli stessi parametri di cp 

$ tail [file]
  mostra le ultime 10 righe (se possibile interpretarle) del file 

$ head [file]
  mostra le prime 10 righe (se possibile interpretarle) del file 

$ vi 
  editor di testo presente in ogni shell unix. Seguira' capitolo a parte per l'uso.

$ dd if=[file in input] of=[file in out] bs=[blocksize di trasferimento] status=progress
  comando utile per fare le copie binarie di file, partizioni, clonazione... si inserisce in if il file di origine, of la sua destinazione, la grandezza dei blocchi da traferire in byte e lo status permette di vedere 
  lo stato dei progressi, perche' di base dd e' un comando silente

$ df -h 
  mostra lo spazio sui device, in unita' leggibili

$ du -h 
  mostra lo spazio occupato dalle varie directory 

# e2fsck /dev/sdxy
  deframmentatore e check per i filesystem ext2/3/4, indicare sempre il device o la partizione cui si vuole eseguire il check, es /dev/sda1

$ find [directory] -name "*.*"
  ricerca a partire dalla directory designata file cui corrispondono secondo il pattern specificato. Vedere capitolo dedicato.

$ free -h 
  mostra lo spazio libero su disco, con unita' human readable

$ [command] help
  mostra la guida del comando 

$ man [command]
  mostra il manuale del comando 

$ top
  mostra i processi in esecuzione
 
$ lspci
  elenca tutti i dispositivi pci attaccati

$ lsusb
  elenca tutti i dispositivi usb attaccati e rilevati

$ lsblk
  elenca tutte le partizioni rilevate dal SO, mountpoint(ovvero dove sono state montate) e la loro dimensione

# swapon /dev/sdxy 
  attiva la partizione di swap 

# swapoff /dev/sdxy 
  disattiva la partizione di swap 
  
# passwd [username]
  cambio password per lo user indicato. Se non indicato, fa il cambio per l'utente di root 

$ pkill [nomeprocesso]
  uccide il processo in esecuzione 

$ kill PID
  uccide il processo con il PID indicato 

$ killall -9 [nomeprocesso]
  uccide tutta l'alberatura dei processi con il nomeprocesso associato

$ poweroff
  spegne la macchina, ATTENZIONE! non tutte le distro hanno questo comando in lista 

# adduser [username]
  aggiunge l'utente indicato, ricordarsi di dare passwd [username] per impostare la password e mettere in sicurezza 

# usermod -a -G [groupname] [username]
  aggiunge l'utente al gruppo selezionato, uso classico e' aggiungere l'utente al gruppo wheel per poter usufruire del comando sudo 
  
# gpasswd -d [username] [groupname]
  rimuove l'utente dal gruppo

# modprobe [parametro] [nomemodulo]
  questo comando permette di montare/smontare moduli del kernel o driver
  passando il parametro -r si forza la rimozione del modulo o del driver

$ wget [url]
  scarica il file remoto nella attuale directory 

$ bzip2 -z filename
  comprime filename con estensione .bzip 

$ bzip2 -d filename 
  decomprime lo zip

$ chmod [parametri] [elemento] [elemento] ..
  permette di cambiare i permessi su cartelle, file anche in maniera multipla.
  ATTENZIONE! se si cambiano i permessi sulle cartelle, ricordarsi di dare il parametro -R per cambiare ricorsivamente anche per gli elementi sottostanti all'interno di esse
  Seguire la sezione apposita per la spiegazione nel dettaglio.

$ clear
  pulisce l'output sul terminale

$ echo "messaggio"
  stampa a schermo il messaggio passato

$ grep 'pattern' file.txt
  permette di cercare il pattern all'interno del file di testo 

$ history
  mostra la cronologia dei comandi dati da terminale 

$ ssh [username]@[indirizzo] -p [porta] 
  connessione sicura usando l'username esistente sulla macchina di destinazione, con la porta specifica. Se non specificata la porta(senza passare il parametro), sara' usata la porta standard (porta 22)

$ scp -p [porta] [file] [username]@[indirizzo]:[path destinazione]
  sfruttando una connessione ssh, questo comando effettua una copia di un file verso la path di destinazione(va specificata per intero a partire dalla radice), come per ssh se il parametro della porta non viene passato, usera' 
  la standard.

$ sh script.sh 
  uno dei due modi per eseguire uno script di shell

$ ./eseguibile
  metodo per eseguire un eseguibile, o anche uno script di shell  

- Scorciatoie da tastiera
  La shell ha preimplementate una serie di scorciatoie da tastiera universali che permettono di muoversi agilmente in CLI

  CTRL + C 
    manda un segnale di interruzione [interrupt] che interrompe l'attuale esecuzione in shell
  
  CTRL + Z
    manda in pausa [zombie process]  l'attuale esecuzione, ricordarsi di riprenderlo dando da terminale $ fg [nomeprocesso], altrimenti $ kill 

  CTRL + D 
    logout dalla shell

  CTRL + R 
    ricerca rapida nella storia dei comandi dati vai cli 

  CTRL + L 
    pulisce la shell dall'output 

  CTRL + U 
    cancella i caratteri dalla posizione corrente fino all'inizio della riga. Utile quando si digitano le password.

  TAB
    esegue l'autocompletamento se il comando viene riconosciuto

- chmod nel dettaglio 
Come detto precedentemente, chmod segue la sintassi:
  $ chmod [parametri] [elemento] [elemento]
I parametri possono essere dichiarati in due modi completamente separati, ovvero in maniera numerica o con specifici caratteri.
  > Parametri numerici:
    valore binario        valore decimale       tipo permesso
        111                     7               read write execute
        110                     6               read write 
        101                     5               read       execute
        100                     4               read 
        011                     3                    write execute
        010                     2                    write 
        001                     1                          execute
        000                     0                     null

    i valori sono posizionati in una terzina, cui ognuna indichera' specificatamente i permessi a: Utente-Gruppo-Altri(pubblico accesso)
    es:
      $ chmod 710 file 
        questo file non sara' accessibile in alcun modo da altri utenti, sara' possibile eseguirlo solo se si appartiene al gruppo e l'utente proprietario potra' leggerlo, scriverci dentro ed eseguirlo 

      $ chmod -R 777 cartella 
        a questa cartella sara' dato accesso completo in maniera ricorsiva a tutti (-R = ricorsivamente anche nelle sottocartelle)
  
  > Parametri a caratteri:
    Un secondo metodo per indicare i permessi da concedere a file e/o cartelle e' ricorrendo al metodo letterale:

    a = all, tutti 

    g = gruppo 

    o = others, altri utenti 

    + = aggiunta permesso/i 

    - = rimozione permesso/i 
    
    = = imposta i permessi rimuovendo quelli gia' concessi eventualmente e non specificati

    r = lettura 

    w = scrittura

    x = esecuzione 

    es:
      chmod u+x file.sh 
      si aggiungono i permessi di esecuzione su file.sh 

      chmod o-w file.sh 
      si rimuovono i permessi di scrittura agli altri utenti 

      chmod g+x, u=rwx, o-rw file.sh 
      si permette al gruppo di eseguire il file, al proprietario si mantengono tutti i diritti, e agli altri utenti sono stati tolti i diritti di lettura e scrittura 


- vi/vim
  Vi o vim(vimproved) e' uno dei piu' potenti editor di testo e IDE a cli che si possano usare in ambiente Unix, non di facile utilizzo di primo acchito, ma prendendoci la mano permette di fare modifiche e analisi di file molto rapidamente
  senza eseguire modifiche e/o errori casuali.
  Segue una sintassi di comandi molto precisa, poiche' manda l'editor in una modalita' ben precisa.
  Appena avviato, vi e' in modalita' neutra, non eseguira' alcuna modifica sul file affinche' non verra' variata la modalita', lo spostamento del cursore funziona con le frecce direzionali con vim, e con HJKL con vi che corrispondono a 
  sinistra-giu'-su-destra.

  i = modalita' inserimento

  a = modalita' inserimento
 
  ESC = disinserisci l'attuale modalita'
  
  :w [pathfile] = scrivi il file, se il pathfile e' vuoto, verra' scritto sul disco nella posizione corrente 
  
  :q = esci da vi 

  /[pattern] = cerca il pattern dalla attuale posizione in avanti

  ?[pattern] = cerca il pattern dalla posizione attuale indietro

  f[occorrenza] = cerca la prima occorrenza successiva alla posizione corrente 

  F[occorrenza] = come la precedente, ma a ritroso

  v = entra in modalita' visuale, serve per evidenziare il testo 

  y = copia il testo precedentemente selezionato 

  x = taglia il testo precedentemente selezionato 

  p = incolla il testo alla posizione attuale

  u = annulla 

  . = ripete l'ultimo comando dato 

  u = annulla 

  . = ripete l'ultimo comando dato 

  E' possibile combinare alcuni comandi, es. :wq => scrive il file su disco e poi esce

  u = annulla 

  . = ripete l'ultimo comando dato 

- Script di shell 
  Gli script di shell permetto un ottimo grado di automatismo dei OS unix, la loro struttura nel dettaglio e' molto semplice:
  si crea un file con estensione .sh 
  come prima riga inserire l'interprete della shell con la seguente sintassi:

  #!/bin/bash 
 
  Ovviamente, se non si usa la bash come shell di default, ma per esempio zsh, bastera' cambiare bash con il nome dell'eseguibile della shell associata tipo zsh.
  Poi di seguito bastera' inserire i comandi che dovra' eseguire, come se li stessi dando normalmente da terminale.
  Esistono anche delle strutture di controllo, per fare dei controlli condizionali e check sulle stringhe.

- Package Managers comuni

Dal 1992 l'ambiente delle distro linux si e' ramificato in una moltitudine di os, ma sostanzialmente oggi le distro sono basate sulle seguenti famiglie:
1. Debian derivate
2. Red Hat derivate
3. Slackware derivate
4. Arch derivate
5. Gentoo derivate
6. LFS - Linux From Scratch

I package manager seguono sempre questa politica di esecuzione:
1] blocco esclusivo del programma per impedire la contemporaneita' delle istanze
2] download in parallelo(2 o 3, dipende dai package manager) dei pacchetti dalle repository indicate nei file di configurazione (sempre che non siano gia' tutti in locale)
3] installazione dei pacchetti e chiusura

Solo l'aggiornamento del kernel richiede il riavvio della macchina, per poter scaricare dalla memoria in esecuzione l'attuale e tirare su il nuovo.

1. Debian
E' una delle famiglie di distro piu' prolifiche nel panorama GNU/Linux, e una delle sue derivate piu' famose e' sicuramente Ubuntu Linux, con sui condivide
il package manager: aptitude con i suoi pacchetti .deb.
Di seguito i comandi base:
$ sudo apt-get update
      sincronizzazione elenco pacchetti con i repository per controllare se ci sono pacchetti nuovi da aggiornare
$ sudo apt-get upgrade
      esegue il download dei pacchetti da aggiornare e li installa
$ sudo apt-get full-upgrade
      esegue il download dei pacchetti da aggiornare e li installa ricostruendo le dipendenze inverse dei pacchetti interessati
$ sudo apt-get install [package] [package] ..
      esegue il download e l'installazione (sempre che il/i pacchetto/i non sia/no gia' in locale, altrimenti passa all'installazione diretta)
$ sudo apt-get remove [package] [package] ..
      esegue la rimozione dei paccetti indicati
$ sudo apt-get purge [package] [package] ..
      esegue la rimozione dei pacchetti indicati, rimuovendo anche file di configurazione e le dipendenze inverse, questo comando va dato con con criterio
$ sudo apt-cache search [package]
      esegue la ricerca del nome del pacchetto e nella sua descrizione sul database locale
$ sudo apt-get check
      esegue un controllo sanitario su tutti i pacchetti installati di sistema e segnala eventuali problematiche
$ sudo apt-get clean
      esegue una pulizia della cache locale di aptitude
$ sudo apt-get autoremove
      esegue una rimozione sicura di pacchetti, dipendenze orfane e dei vecchi kernel, conservando almeno le ultime 3 release (da lanciare almeno una volta ogni update)

n.b. Dalla Debian 8 a salire e dalla Ubuntu 16.04 la dicitura apt-get e' stata condensata in apt, ma i comandi forniti pocanzi sono altrettanto validi
n.b.2 upgrade, full-upgrade, install, remove, purge, autoremove accettano il parametro -y per la conferma automatica delle operazioni.

Possibili problemi e possibili risoluzioni
Apt rarmente da' problemi, ma quando succede e' per poche semplici ragioni:
- spazio esaurito sul device
        liberare spazio manualmente senza passare per apt, visto che reiterebbe lo stesso errore, al peggio, fare unresize offline della partizione di root
- mancata connessione ad internet o repository che da' 404 (repo dismessa)
- pacchetti danneggiati a causa dell'interruzione del processo di installazione dopo il download
        in questo caso eseguire le istruzioni a video sul messaggio di errore cui potrebbero suggerire la seguente fila di comandi:
        $ sudo dpkg --configure -a
        $ sudo apt install -f
        $ sudo apt update
          [serve solo come controllo per vedere se ripresenta l'errore, in caso di errore ripetere con anche autoremove e check]
        $ sudo apt upgrade -y

2. Red Hat 
Nella sua quasi trentennale storia, Red Hat ha dato alla luce 3 diversi package managers che gestiscono i proprio pacchetti .rpm.
Il primo e' rpm, primo ad essere stato creato ed ancora in uso ad oggi, sulle distro Fedora, RHEL e CentOS dovrebbe esserci ancora essendo le prime due ufficiali Red Hat e la terza una versione comunitaria della 
seconda.
> rpm
$ sudo rpm -i (--nodeps) [package] 
  installa il pacchetto selezionato 
$ sudo rpm -u [package]
  aggiorna il pacchetto selezionato 
$ sudo rpm -e [package]
  rimuove il pacchetto selezionato 
$ rpm -q [package]
  esegue una ricerca sul pacchetto indicato 
$ sudo rpm-initdb $ sudo rpm-rebuilddb
  entrambi i comandi servono per ricostruire il database dei pacchetti a seguito di anomalie 

> yum 
nato originarinamente per Yellow Dog Linux, e' stato rapidamente adottato negli anni come package manager ufficiale su buona parte delle RH derived.
$ sudo yum install [package]
  installazione pacchetto/i selezionati
$ sudo yum remove [package]
  rimuove il pacchetto o i pacchetti selezionati
$ sudo yum update 
  installazione diretta delle nuove versioni dei pacchetti 
$ sudo yum check-update 
  cerca nei repository la presenza di nuovi pacchetti 
$ sudo yum search [package]
  ricerca del pacchetto all'interno del db locale 
$ sudo yum list installed [package]
  ricerca se il pacchetto e' installato nel sistema 

> dnf
il piu' recente dei package managers di casa RH 
mantiene gli stessi comandi di yum, pero' con la differenza che al posto in invocare yum nel comando si usera' dnf 

> zypper
package manager di SuSE e openSuSE, sfrutta gli stessi pacchetti rpm, ma ottimizzati solo per queste distro tedesche, il cui gestore di sistema YaST pilota fino al kernel.
Anche zypper ha la stessa sintassi di comandi ereditata da yum.

3. Slackware
Slackware e' la distro piu' vecchia assieme a debian, condivide con essa la fama di distro estremamente stabile, ma al contempo presenta una piccola difficolta': la gestione dei pacchetti non cura le dipendenze di essi.
slackpkg e' il tool piu' indicato per la gestione dei pacchetti su Slackware.

# slackpkg search [package]
  cerca il pacchetto selezionato 
# slackpkg install [package]
  installa il pacchetto selezionato 
# slackpkg remove [package]
  rimuove il pacchetto selezionato 
# slackpkg upgrade-all 
  aggiorna il sistema sincronizzandolo all'albero degli aggionamenti di Slackware 
# slackpg download [package]
  scarica il pacchetto senza installarlo

4. Arch Linux 
Distro che sta ottenendo un grande successo negli ultimi anni tra i power users, rolling release(ovvero che ogni singola novita' viene messa negli aggiornamenti, ma cio' implica una minore stabilita' di sistema), ed il suo 
package manager pacman unisce una rapidita' ed installazione molto superiore agli altri package manager.

# pacman -S [package] [package] ..
  installa i pacchetti selezionati 
# pacman -R [package]
  rimuove i pacchetti selezionati 
# pacman -Rs [package]
  rimuove i pacchetti selezionati comprese le dipendenze inverse non piu' necessarie
# pacman -Syu
  aggiorna i pacchetti e installa i relativi upgrade 
$ pacman -Ss [package]
  esegue una ricerca in database del pacchetto richiesto
# paccache -r 
  pulizia della cache 

  >Errori e soluzioni
  - "Failed to commit transaction (conflicting files)" error 
    se si verifica il seguente errore:
      error: could not prepare transaction
      error: failed to commit transaction (conflicting files)
      package: /path/to/file exists in filesystem
      Errors occurred, no packages were upgraded.
    E' perche' pacman ha rilevato un conflitto tra file, quindi per design di codice, non sovrascrivera' i file.
    Controllare prima se altri pacchetti puntano al file (# pacman -Qo /path/to/file), e segnalare il bug. 
  - "Failed to commit transaction (invalid or corrupted package)" error 
    # find /var/cache/pacman/pkg/ -iname "*.part" -exec rm {} \;
  - "Failed to init transaction (unable to lock database)" error 
    # rm /var/lib/pacman/db.lck
  - Reinstallazione manuale di pacman (https://wiki.archlinux.org/index.php/Pacman#Manually_reinstalling_pacman)
    seguire la guida appuntata, e' molto piu' esplicativa e spiega dove e come mettere le mani.

Ben inteso che questa parte e' veramente una microscopica frazione rispetto alla piu' completa ed esaustiva archwiki che copre molti altri aspetti.
Nel dubbio consultare https://wiki.archlinux.org

5. Gentoo 
Nel panorama Linux Gentoo e' conosciuta principalmente per due cose: gli eterni tempi di compilazione dei singoli pacchetti e per le performance (se ben configurati)
Il package manager di Gentoo e' chiamato portage e compila i pacchetti ad hoc per la macchina ove specificato. Tra tutti e' il package manager con 
cui e' piu' facile distruggere la stabilita' del sistema.
Sono dell'idea che nulla possa sostituire l'handbook scritto dalla comunita' (https://wiki.gentoo.org/wiki/Handbook:AMD64/), ma vediamo di condensare i comandi principali
ATTENZIONE! perstare molta attenzione alle flag che sono impostate nel file di ompilazione di sistema, una flag settata male e il sistema sara' danneggiato!
# emerge --sync
  sincronizza l'elenco dei pacchetti locali con quelli remoti
# emerge-webrsync
  in caso di problemi causati dal firewall, questo comando esegue la stessa operazione di prima ma passando per altre porte, installando l'albero piu' recente 
$ emerge --search pdf
  cerca tutti i pacchetti contenetei la parola 'pdf'
$ emerge --searchdesc pdf
  simile al precedente, ma cerca per solo per descrizione 
# emerge --ask [package] 
  installa il pacchetto indicato 
# emerge --unmerge [package]
  rimuove il pacchetto indicato 
# emerge --update --ask @world
  aggiorna il sistema, prestare molta attenzione che le flag siano settate bene, onde evitare problemi 
# emerge --update --deep --with-bdeps=y --newuse @world 
  esegue l'aggiornamento completo di sistema e ricostruisce tutte le dipendenze necessarie ricompilandole 

Entropy
E' un wrapper che si appoggia a Portage, questo e' il package manager che si trova ufficialmente su Sabayon Linux, distro italiana basata su Gentoo, con il grande pregio di essere 
molto piu' semplice in fase di installazione rispetto alla distro madre e di essere 'out of the box' o 'chiavi in mano' appena installata.
# equo update 
  sincronizza i pacchetti da aggiornare 
# equo install [package] --ask 
  installa i pacchetti selezionati, ask e' opzionale, ma consigliato  
# equo cleanup 
  pulisce la cache dei pacchetti 
# equo search [package] 
  esegue la ricerca del pacchetto indicato 
# equo remove [package] --ask 
  esegue la rimozione del pacchetto designato 
# equo upgrade --ask 
  esegue l'aggionamento dei pacchetti, dopo l'update 
 
6. Linux From Scratch 
Formalmente questa non e' una distribuzione, ma e' il kit di montaggio per chi vuole fare la propria distro linux da zero partendo dal kernel vanilla. Qui sostanzialmente non 
esiste un vero e proprio package manager, poiche' essendo fatto il sistema assolutamente da 0, ogni particolarita', viene documentata sul sito di sviluppo. Esiste una guida ufficiale 
a LFS aggiornata periodicamente. Tratta ogni singolo aspetto di un OS del pinguino. 
http://www.linuxfromscratch.org/

- Programmi ed Utilities
In questa sezione andro' ad elencare alcune utilities utili sia in ambito desktop che in ambito server, questa parte non seguira' un ordine particolare.
 
  mc (Midnight Commander)
  Clone di Norton Commander.
  Questo file manager e' esclusivamente a riga di comando, molto utile nell'uso di sistemi a risorse limitate o ad uso server. Anche per fare backup al volo risulta essere molto comodo.
  Disponibile per tutte le distro, con la sua doppia visuale su cartelle, permette anche connessioni ssh, ftp o shell sulla prima o sulla seconda finestra, o su entrambe. 
  Al suo interno ha anche un editor di testo molto basilare di nome Mcedit.
  
  partizionatori cli 
  gdisk, fdisk, parted
  I tre programmi sopra citati fanno sostanzialmente la stessa identica cosa: preparano geometricamente le partizioni e creano le relative tabelle per il MBR(master boot record) GPT o UEFI, 
  e assegnano il tipo di filesystem che andranno ad ospitare, ma non formattano le partizioni. Queste andranno create a parte.

  # mkswap /dev/sdxy 
  creera' la partizione di swap nella partizione creata in precedenza /dev/sdxy 
  !ATTENZIONE: per i sistemi con meno di 1GB di ram seguire sempre il concetto 1:2 in fase di creazione dello spazio per la swap (1GB di RAM -> 2GB su disco per la swap), questo permettera' 
  di avere lo spazio per mandare il sistema in ibernazione.
  
  # swapon /dev/sdxy 
  attivera' la patizione di swap e sara' esposta come spazio ram aggiuntivo su disco. 

  # mkfs.[filesystem] [parametri] /dev/sdxy 
  Con il seguente comando si va a creare il filesystem per la partizione indicata.
  Mantenendo questa sintassi si puo' passare i seguenti filesystem:
  [fs]      [tool userspace]
  btrfs     [btrfs-progs]
  ext*      [e2fsprogs]
  fat       [dosfstools]
  f2fs      [f2fs-tools]
  hfsplus   [hfsprogs]
  jfs       [jfsutils]
  nilfs     [nilfs-utils]
  ntfs      [ntfs-3g]
  reiser4   [raiser4progs]
  reiserfs  [raiserfsprogs]
  udf       [udftools]
  xfs       [xfsprogs]
  Per poter usufruire di ognuno di questi fs elencati sopra, assicurarsi di avere il tool userspace installato in sistema (ogni tool corrisponde al pacchetto installabile).
  *vale dagli extended dalla versione 2 alla 4, consigliato installare almeno la versione 4.

  montaggio FS
  # mount /dev/sdxy /destinazione 
  Il comando esegue il 'montaggio' in una cartella del filesystem o del dispositivo nella destinazione predestinata. La destinazione deve esistere per completare l'operazione.

  smontaggio FS 
  # umount -R /destinazione 
  Smonta la partizione o il dispositivo designato.

  versionamento software git
  Creato dal padre di Linux, git e' usato principalmente per lo sviluppo software, e per ospitare buona parte dei progetti open source della rete.

  

- Concetti 
> Struttura delle cartelle 
Cio' che segue e' la struttura generica del FS, puo' variare da distro a disto con cartelle extra o alcune di queste non utilizzate
/ - root, contiene tutte le cartelle, e l'intero FS di sistema  
 ----
    |
    |-/bin - contiene convenzionalmente tutti i binari necessari per l'avvio in single user e per tutti gli utenti i comandi come cat, ls, cp ...
    |
    |-/boot - contiene i kernel di sistema, initrd e il bootloader
    |
    |-/dev - contiene tutti i dispositivi e i virtuali come /null /zero /random /tty ...
    |
    |-/etc - Host-specific system-wide configuration files, contiene i file di configurazione di sistema (es. di ssh, apache, nginx...)
    ------
          |
          |-/opt - contiene file di configurazione di /opt per i pacchetti di add-on 
          |
          |-/sgml - contiene i file di configurazione e cataloghi per software che processano SGML
          |
          |-/X11 - contiene i file di configurazione per il server grafico X11, la base per l'interfaccia grafica
          |
          |-/xml - contiene i file di configurazione e cataloghi per software che processano XML
    |
    |-/home - qui sono contenute tutte le cartelle utente con le relative configurazioni e impostazioni per la singola sessione utente 
    |
    |-/lib - contiene le librerie essenziali per l'esecuzione dei binari in /bin e /sbin 
    |
    |-/media - in questa cartella vengono messi i device montati automaticamente dall'OS o convezionalmente quelli che vengono montati manualmente 
    |
    |-/mnt - contiene i filesystem montati temporaneamente
    |
    |-/opt - cartella che contiene i pacchetti software statici 
    |
    |-/proc - cartelle contenente un filesystem statico dove fornisce informazioni sui processi e kernel sotto forma di file. Montato al volo viene popolato dal sistema. Richiamata, puo' fornire anche info 
    |         di sistema.
    |-/root - L'equivalente della cartella home, ma solo per l'utente root(amministratore di sistema completo)
    |
    |-/run - contiene variabili eseguite runtime e informazioni di sistema che descrivono il sistema da quando e' stato avviato 
    |
    |-/sbin - contiene i binari essenziali di sistema come per esempio fsck, init, route ...
    |
    |-/srv - contiene dati specifici come script per webserver e repository per sistemi di controllo di versione 
    |
    |-/sys - contiene informazioni su dispositivi di sistema, driver e alcune funzioni del kernel 
    |
    |-/tmp - cartella temporanea di sistema, ce n'e' una seconda anche in /var 
    |
    |-/usr - cartella gerarchica secondaria dopo la radice, contiene la maggior parte degli applicativi multi-utente e parte delle applicazioni
    ------
          |
          |-/bin - contiene binari non essenziali ma utilizzabili da tutti gli utenti 
          |
          |-/include -cartella contenente gli includes standard per gli applicativi 
          |
          |-/lib -contiene le librerie per i binari di /usr/bin e /usr/sbin
          |
          |-/lib<qual> - contiene librerie specifiche architetture 32/64bit in caso di macchina che sfrutta il multiarch
          |
          |-/local -cartella gerarchica di terzo livello contenenti dati specifici per l'host, ha sottodirectory come bin, lib, share...
          |
          |-/sbin - contiene binari non essenziali di sistema, come ad esempio i demoni per i network-services
          |
          |-/share - contiene dati architetturalmente indipendenti condivisi col sistema 
          |
          |-/src - contiene codici sorgenti varii, come ad esempio i sorgenti dell'header del kernel 
          |
          |-/X11R6 - contiene il server grafico X versione 6 
    |
    |-/var - contiene file variabili cui mutano durante l'esecuzione di sistema 
    ------
          |
          |-/cache - cartella ove vengono messi i file necessari alla consultazione dei programmi generati localmente 
          |
          |-/lib - informazioni di stato e dati persistenti che danno informazioni di esecuzione come a database, package managers ..
          |
          |-/lock - contiene i file di blocco che tengono traccia delle risorse correntemente in uso
          |
          |-/log - contiene i file di log di molti applicativi di sistema, controllare qui eventuali messaggi di errore 
          |
          |-/mail - contiene i file mailbox per i servizi di posta via internet che di sistema, per alcune distro questa cartella e' stata deprecata ed e' stata spostata su /var/spool 
          |
          |-/opt - contiene dati variabili derivati dalla cartella /opt 
          |
          |-/run - collegamento simbolico verso la cartella /run, la cui funzione e' identica  
          |
          |-/spool - cartella di passaggio per i file che sono in attesa di essere processati, come i file di stampa o i file che contengono email ...
          ------
                |
                |-/mail - deprecata, era la cartella di riferimento per le mailboxes 
          |
          |-/tmp - cartella per il piazzamento dei file temporanei che devono essere preservati tra i reboot. 

> Devices
In Unix, i dispositivi esterni, come HDD, chiavette usb, dispositivi ottici, ecc. sono visti come file da montare e successivamente delle cartelle montate.

> File nascosti 
La notazione POSIX standard definisce un file "nascosto" come un file che come primo carattere ha il punto .
Per logica, ogni file/cartella che ha come primo carattere un punto non sara' visibile all'utente.

> Grafica
Come visto in precedenza, il server grafico e' un programma a se' stante, non e' essenziale per avere il sistema in funzione, visto che quando e' in cli usa dei driver generici a bassa risoluzione in 
modalita' failsafe. E' molto raro che questa modalita' non funzioni.
I server grafici al momento sono soltanto due: 
1. Xorg
  primo progetto per un server grafico alla base di tutti sistemi grafici moderni in ambienti FOSS, il progetto risale agli anni 80, e da allora e' rimasto contestualmente alla versione 11 
2. Wayland
  dovrebbe essere il progetto successore a xorg, creato in anni recenti e sponsorizzato da Red Hat, in questo momento gira su in numero limitato di distro a causa della sua non eccessiva diffusione
  e della compatibilita' delle varie librerie con esso. Fedora, Red Hat sono i principali playground ove provare nativamente questa soluzione.

Ai server grafici successivamente si appoggiano i window manager o (la maggioranza dei casi) i desktop environment.
La differenza tra i due sono sostanzialmente pochi fattori:
- Window Managers sostanzialmente sono demandati a fare i decoratori delle finestre, possono essere d'appoggio ai desktop environment, sono storicamente molto piu' leggeri di quest'ultimi anche perche'
non si portano dietro molti applicativi e funzionalita', anzi, spesso non ne hanno, se non poche ma essenziali funzioni. Spesso e volentieri sono semplicemente coposti da pochissimi file di configurazione 
che indicano come disegnare la finestra.
Ve ne sono di 4 tipi:
  Composing:
  Stacking: 
  Tiling: le finestre non possono essere sovrapposte ma affiancate, appunto tiling -> piastrellate
  Dynamic: permette lo switch dinamico tra tiling e floating windows

- Desktop Environment, offrono un'esperienza desktop piu' completa, con essi spesso ci sono applicativi e programmi esclusivi che permettono all'utente di avere appena installati una moltitudine di funzioni 
che gestiscono anche vari aspetti di sistema, come ad esempio il gestore di rete, dell'energia, risoluzione dello schermo, decoratori e temi, frontend per l'audio ecc.
I principali DE son:  
  KDE
  GNOME
  Cinnamon
  MATE
  XFCE
  LXQt
